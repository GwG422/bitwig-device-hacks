component midi_timecode
{
   @name "FPS Identifier"
   value_inport i32 fpsIdentifier
   {
      switch (fpsIdentifier & 0x3)
      {
      case 0:
         fps = 24;
         break;

      case 1:
         fps = 25;
         break;

      case 2:
         fps = 29.97;
         break;

      case 3:
         fps = 30;
         break;
      }
   }

   @name "Song position in seconds"
   audio_inport f32 seconds;

   @name "Note Out"
   event_outport NoteEvent note_out;

   @name "Enables/Disables the component"
   value_inport bool enabled;

   f32 fps = 30;
   f32 previousFrame = -1;
   f32 previousQuarterFrame = -1;
   i32 quarterFrameIndex = 0;

   process
   {
      if (enabled)
      {
         f32 currentFrame = floor(seconds * fps);
         f32 currentQuarterFrame = floor(seconds * fps * 4);

         if (fabs(currentQuarterFrame - previousQuarterFrame) > 0.5)
         {
            previousQuarterFrame = currentQuarterFrame;

            // send midi quarter frame
            NoteEvent note;
            note.type = note.MIDI;
            note.midi = 0xF100;

            u8 hours = floor(seconds / 3600).u8 & 0xf;
            u8 mins = floor(seconds / 60).u8 % 60;
            u8 secs = seconds.u8 % 60;
            u8 frame = (currentFrame % fps).u8;

            switch (quarterFrameIndex)
            {
            case 0: note.midi = 0x00 | (frame & 7).i32; break;
            case 1: note.midi = 0x10 | (frame >> 4).i32; break;
            case 2: note.midi = 0x20 | (secs & 7).i32; break;
            case 3: note.midi = 0x30 | (secs >> 4).i32; break;
            case 4: note.midi = 0x40 | (mins & 7).i32; break;
            case 5: note.midi = 0x50 | (mins >> 4).i32; break;
            case 6: note.midi = 0x60 | (hours & 7).i32; break;
            case 7: note.midi = 0x70 | (hours >> 4).i32; break;
            }
            note.midi = (note.midi << 8) | 0xF1;

            quarterFrameIndex = (quarterFrameIndex + 1) & 7;
            send note_out note;
         }

         if (fabs(currentFrame - previousFrame) > 0.5)
         {
            previousFrame = currentFrame;

            u8 hours = floor(seconds / 3600).u8 & 0xf;
            u8 mins = floor(seconds / 60).u8 % 60;
            u8 secs = (seconds.u32 % 60).u8;
            u8 frame = (currentFrame % fps).u8;

            // send midi sysex timecode
            NoteEvent note;

            note.type = note.SHORT_SYSEX;
            note.sysexLength = 10;
            note.sysex[0] = 0xF0;
            note.sysex[1] = 0x7F;
            note.sysex[2] = 0x7f;
            note.sysex[3] = 0x01;
            note.sysex[4] = 0x01;
            note.sysex[5] = ((fpsIdentifier.u8 & 0x3) << 4) | hours;
            note.sysex[6] = mins;
            note.sysex[7] = secs;
            note.sysex[8] = frame;
            note.sysex[9] = 0xF7;

            send note_out note;
         }
      }
   }
}