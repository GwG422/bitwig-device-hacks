component shapers_OS4_CH2
{
   audio_inport f32<2> in;
   audio_inport f32 drive;
   value_inport i32 mode;
   audio_outport f32<2> out;

   const i32 M = 8;

   f32<M> shape(f32<M> in, f32 drive)
   {
      // TODO only switch mode on ZC
      if (mode == 1) // SIN
      {
         return (1-drive * drive * drive) * in + cos(in * drive * 4);
      }
      else if (mode == 2) // RECTIFY
      {
         return in * (1-drive) + 2 * drive * fabs(in);
      }
      else if (mode == 3) // DIODE
      {
         f32<M> level = -2 + 4 * drive;
         f32<M> zero = 0;
         return fmax(in, level) - fmax(level, zero);
      }
      else if (mode == 4) // SOFTCLIP
      {
         f32<M> lo = -1.139;
         f32<M> hi = 1.139;
         f32<M> a = -1.0/3.0;
         f32<M> b = 2.0/15.0;
         f32<M> c = -17.0/315.0;
         f32<M> x = fmax(fmin(in * (1 + 4 * drive), hi), lo);
         f32<M> xx1 = x * x;
         f32<M> y1 = 1 - a * xx1;
         f32<M> xxxx1 = xx1 * xx1;
         y1 += b * xxxx1;
         y1 += c * xxxx1 * xx1;
         return y1 * x;
      }
      else if (mode == 5) // HARDCLIP
      {
         f32 d = 2 * drive * drive;
         f32<M> lo = -2 + 0.6 * d;
         f32<M> hi = 2 - 0.4 * d;
         return fmin(fmax(in*(1 + 2 * d), lo), hi);
      }
      else if (mode == 6) // 2ND
      {
         return sin(PI * fabs(in)) * drive + (1-drive) * in;
      }

      return in;
   }

   f32<8>[24] LP_D4_COEFFS;

   init
   {
      LP_D4_COEFFS[0] = <0.000005, 0.000005, -0.000062, -0.000062, -0.000223, -0.000223, -0.000512, -0.000512>;
      LP_D4_COEFFS[1] = <-0.000891, -0.000891, -0.001231, -0.001231, -0.001342, -0.001342, -0.001052, -0.001052>;
      LP_D4_COEFFS[2] = <-0.000325, -0.000325, 0.000655, 0.000655, 0.001496, 0.001496, 0.001739, 0.001739>;
      LP_D4_COEFFS[3] = <0.001102, 0.001102, -0.000301, -0.000301, -0.001901, -0.001901, -0.002857, -0.002857>;
      LP_D4_COEFFS[4] = <-0.002467, -0.002467, -0.000606, -0.000606, 0.002047, 0.002047, 0.004191, 0.004191>;
      LP_D4_COEFFS[5] = <0.004491, 0.004491, 0.002344, 0.002344, -0.001605, -0.001605, -0.005532, -0.005532>;
      LP_D4_COEFFS[6] = <-0.007214, -0.007214, -0.005201, -0.005201, 0.000173, 0.000173, 0.006597, 0.006597>;
      LP_D4_COEFFS[7] = <0.010661, 0.010661, 0.009561, 0.009561, 0.002814, 0.002814, -0.006975, -0.006975>;
      LP_D4_COEFFS[8] = <-0.014917, -0.014917, -0.016103, -0.016103, -0.008346, -0.008346, 0.006002, 0.006002>;
      LP_D4_COEFFS[9] = <0.020344, 0.020344, 0.026500, 0.026500, 0.018811, 0.018811, -0.002195, -0.002195>;
      LP_D4_COEFFS[10] = <-0.028500, -0.028500, -0.046742, -0.046742, -0.043320, -0.043320, -0.010502, -0.010502>;
      LP_D4_COEFFS[11] = <0.049152, 0.049152, 0.122242, 0.122242, 0.188480, 0.188480, 0.227796, 0.227796>;
      LP_D4_COEFFS[12] = <0.227796, 0.227796, 0.188480, 0.188480, 0.122242, 0.122242, 0.049152, 0.049152>;
      LP_D4_COEFFS[13] = <-0.010502, -0.010502, -0.043320, -0.043320, -0.046742, -0.046742, -0.028500, -0.028500>;
      LP_D4_COEFFS[14] = <-0.002195, -0.002195, 0.018811, 0.018811, 0.026500, 0.026500, 0.020344, 0.020344>;
      LP_D4_COEFFS[15] = <0.006002, 0.006002, -0.008346, -0.008346, -0.016103, -0.016103, -0.014917, -0.014917>;
      LP_D4_COEFFS[16] = <-0.006975, -0.006975, 0.002814, 0.002814, 0.009561, 0.009561, 0.010661, 0.010661>;
      LP_D4_COEFFS[17] = <0.006597, 0.006597, 0.000173, 0.000173, -0.005201, -0.005201, -0.007214, -0.007214>;
      LP_D4_COEFFS[18] = <-0.005532, -0.005532, -0.001605, -0.001605, 0.002344, 0.002344, 0.004491, 0.004491>;
      LP_D4_COEFFS[19] = <0.004191, 0.004191, 0.002047, 0.002047, -0.000606, -0.000606, -0.002467, -0.002467>;
      LP_D4_COEFFS[20] = <-0.002857, -0.002857, -0.001901, -0.001901, -0.000301, -0.000301, 0.001102, 0.001102>;
      LP_D4_COEFFS[21] = <0.001739, 0.001739, 0.001496, 0.001496, 0.000655, 0.000655, -0.000325, -0.000325>;
      LP_D4_COEFFS[22] = <-0.001052, -0.001052, -0.001342, -0.001342, -0.001231, -0.001231, -0.000891, -0.000891>;
      LP_D4_COEFFS[23] = <-0.000512, -0.000512, -0.000223, -0.000223, -0.000062, -0.000062, 0.000005, 0.000005>;
   }

   process
   {

   }
}
